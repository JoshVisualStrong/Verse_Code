
using { /Fortnite.com/Devices }
using { /Fortnite.com/Characters }
using { /Fortnite.com/AI }
using { /Verse.org/Simulation }
using { /UnrealEngine.com/Temporary/UI }
using { /UnrealEngine.com/Temporary/Diagnostics }
using { /Verse.org/Assets }
using { /UnrealEngine.com/Temporary/SpatialMath }
using { /Verse.org/Colors }
using { /Fortnite.com/UI }



            


zzmanager_wave_spawner := class(creative_device):
    @editable Zombie_NPC_Spawner : npc_spawner_device = npc_spawner_device{}
    @editable Crawler_NPC_Spawner : npc_spawner_device = npc_spawner_device{}
    @editable StartTrigger : trigger_device = trigger_device{}
    @editable RoundTimer : timer_device = timer_device{}
    @editable TotalWaves : int = 4
    @editable HudWavesFinished : hud_message_device=hud_message_device{}
    @editable HudNextWaveIncoming : hud_message_device=hud_message_device{}
    
    var wavezz : float = 0.0
    var CurrentWave : int = 1
    var ActiveCreatures : int = 0
    var CurrentKillCount : int = 0
    var TotalKillsRequired : int = 4 # Define the variable here
    var AliveNpcs : []fort_character = array{}
    var MaxWaveAmount : int = 4
   
    GameUI : game_ui = game_ui{}
    
                
    OnBegin<override>()<suspends>:void=
        StartTrigger.TriggeredEvent.Subscribe(StartWaves)
        Zombie_NPC_Spawner.EliminatedEvent.Subscribe(CreatureEliminated)
        Zombie_NPC_Spawner.SpawnedEvent.Subscribe(CreatureSpawned)
        
        Zombie_NPC_Spawner.Disable()
       

        for (Player : GetPlayspace().GetPlayers()):
            GameUI.RemoveUIForPlayer(Player)

    StartWaves(TriggeringAgent : ?agent):void=
        spawn { StartWave() }

    StartWave()<suspends>:void=
        if (CurrentWave > TotalWaves):
            spawn { EndGame() }
            return
            

        else:
            set TotalKillsRequired = 4 * CurrentWave
        
            Zombie_NPC_Spawner.Enable()
            Zombie_NPC_Spawner.Spawn()
            
            for (Player : GetPlayspace().GetPlayers()):
                GameUI.CreateUIForPlayer(Player)
            
            
                

        
    CheckTotalWavesMet():void=
        if (CurrentWave > TotalWaves):
            spawn { EndGame() }

    EndWave()<suspends>:void=
        Zombie_NPC_Spawner.DespawnAll(false)
        Zombie_NPC_Spawner.Disable()
        
        set CurrentKillCount = 0
        set ActiveCreatures = 0

        for (Player : GetPlayspace().GetPlayers()):
            GameUI.ResetUIState(Player,CurrentWave,wavezz,CurrentWave)
        
        set CurrentWave += 1
        GameUI.UpdateCurrentWave(CurrentWave)
       

        CheckTotalWavesMet()  # Ensure this is called after incrementing CurrentWave
       
        if (CurrentWave <= TotalWaves):
            RoundTimer.Reset()
            RoundTimer.Start()
            #update timer ui
            Duration := RoundTimer.GetActiveDuration()
            for (Player : GetPlayspace().GetPlayers()):
                GameUI.UpdateTimer(Duration)

            RoundTimer.SuccessEvent.Subscribe(TimerCompleted)
            HudNextWaveIncoming.Show()
           
        else:
            CheckTotalWavesMet()  # Check total waves met after the wave increment

    TimerCompleted(TriggeringAgent: ?agent):void=
        spawn { StartWave() }

    EndGame()<suspends>:void=
        Zombie_NPC_Spawner.Disable()
        Zombie_NPC_Spawner.DespawnAll(false)
        for (Player : GetPlayspace().GetPlayers()):
            GameUI.ResetUIState(Player,CurrentWave,wavezz,CurrentWave)
        HudWavesFinished.Show()

    CreatureEliminated(Payload : device_ai_interaction_result):void= 
        set CurrentKillCount += 1
        GameUI.UpdateKillCount(CurrentKillCount)
        if (CurrentKillCount >= TotalKillsRequired):  
            spawn { EndWave() }

    CreatureSpawned(Payload : agent):void=  
        set ActiveCreatures += 1

    FilterActive()<transacts>:[]fort_character=
        var ActiveFCs : []fort_character = array{}
        for(FC: AliveNpcs):
            if(FC.IsActive[]):
                set ActiveFCs += array{FC}
        return ActiveFCs
    
    GetActiveNpcPositions()<transacts>:[]vector3=
        var Positions : []vector3 = array{}
        for(FC: AliveNpcs):
            set Positions += array{FC.GetTransform().Translation}

        for(Player:GetPlayspace().GetPlayers()):
            if(set TempPlayerPersistance[Player] = NpcPositions{Positions:=Positions}){}
        return Positions

    NpcUpdateLoop()<suspends>:void=
        loop:
            Sleep(0.1)
            GetActiveNpcPositions()

    AddNPC(NPC:agent):void=
        if(NPCFC:= NPC.GetFortCharacter[]):
            set AliveNpcs += array{NPCFC}

    RemoveNPC(Res:device_ai_interaction_result):void=
        if(Target:=Res.Target?):
            if(FC:= fort_character[Target]):
                if(FoundIndex := AliveNpcs.Find[FC], NewArr:= AliveNpcs.RemoveElement[FoundIndex]):
                    set AliveNpcs = NewArr





using { /Fortnite.com/Devices }
using { /Fortnite.com/Characters }
using { /Fortnite.com/AI }
using { /Verse.org/Simulation }
using { /UnrealEngine.com/Temporary/UI }
using { /UnrealEngine.com/Temporary/Diagnostics }
using { /Verse.org/Assets }
using { /UnrealEngine.com/Temporary/SpatialMath }
using { /Verse.org/Colors }
using { /Fortnite.com/UI }
var TempPlayerPersistancez: weak_map(player, NpcPositions) = map{}

NpcPositionsz := class<final><persistable>:
    Positions:[]vector3



game_ui := class():
    NightmaresKillsText<localizes>(Kills : int) : message = "SCP1166 Secured : {Kills}" 
    TimerText<localizes>(Seconds : float) : message = "Next wave in: {Seconds} seconds"
    CurrentWaveText<localizes>(Wave : int) : message = "Current Wave: {Wave}"
  
    KillCountWidget : button_loud = button_loud{}
    TimerWidget : text_block = text_block{}
    WaveCountWidget : text_block = text_block{}  # UI widget to display the wave count

    S2M<localizes>(S:string):message="{S}"
   
    UpdateKillCount(TotalKills : int):void=
        KillCountWidget.SetText(NightmaresKillsText(TotalKills))

    UpdateTimer(SecondsRemaining : float):void=
        TimerWidget.SetText(TimerText(SecondsRemaining))

    UpdateCurrentWave(Wave : int):void=
        WaveCountWidget.SetText(CurrentWaveText(Wave))
           
    CreateUIForPlayer(Player : player): void=
        if (PlayerUI := GetPlayerUI[Player]):
            KillCountWidget.SetText(NightmaresKillsText(0))

            KillCountCanvas : canvas = canvas:
                Slots := array:
                    canvas_slot:
                        Anchors := anchors{Minimum := vector2{X := 0.5, Y := 1.0}, Maximum := vector2{X := 0.5, Y := 1.0}}
                        Offsets := margin{Top := -110.0, Left := 0.0, Right := 0.0, Bottom := 10.0}
                        Alignment := vector2{X := 0.5, Y := 0.5}
                        SizeToContent := true

                        #DefaultTextColor:=White,DefaultShadowOffset:=option{vector2{X:=2.5,Y:=2.5}},DefaultShadowColor:=Black
                        Widget := KillCountWidget
            PlayerUI.AddWidget(KillCountCanvas)
                
            TimerCanvas : canvas = canvas:
                Slots := array:
                    canvas_slot:
                        Anchors := anchors{Minimum := vector2{X := 0.5, Y := 1.0}, Maximum := vector2{X := 0.5, Y := 1.0}}
                        Offsets := margin{Top := -50.0, Left := 0.0, Right := 0.0, Bottom := 10.0}
                        Alignment := vector2{X := 0.5, Y := 0.5}
                        SizeToContent := true
                        Widget := TimerWidget
            PlayerUI.AddWidget(TimerCanvas)
            
            WaveCanvas : canvas = canvas:
                Slots := array:
                    canvas_slot:
                        Anchors := anchors{Minimum := vector2{X := 0.5, Y := 1.0}, Maximum := vector2{X := 0.5, Y := 1.0}}
                        Offsets := margin{Top := -170.0, Left := 0.0, Right := 0.0, Bottom := 10.0}
                        Alignment := vector2{X := 0.5, Y := 0.5}
                        SizeToContent := true
                        Widget := WaveCountWidget
            PlayerUI.AddWidget(WaveCanvas)

    HideUIForPlayer(Player : player): void=
        if (PlayerUI := GetPlayerUI[Player]):
            KillCountWidget.SetVisibility(widget_visibility.Collapsed)
            TimerWidget.SetVisibility(widget_visibility.Collapsed)
            WaveCountWidget.SetVisibility(widget_visibility.Collapsed)

    ResetUIState(Player : player, TotalKills : int, SecondsRemaining : float, Wave : int): void=
        if (PlayerUI := GetPlayerUI[Player]):
            KillCountWidget.SetText(NightmaresKillsText(TotalKills))
            TimerWidget.SetText(TimerText(SecondsRemaining))
            WaveCountWidget.SetText(CurrentWaveText(Wave))
            # Reset visibility to default state (visible)
            KillCountWidget.SetVisibility(widget_visibility.Visible)
            TimerWidget.SetVisibility(widget_visibility.Visible)
            WaveCountWidget.SetVisibility(widget_visibility.Visible)

    RemoveUIForPlayer(Player : player): void=
        if (PlayerUI := GetPlayerUI[Player]):
            Print("Removing KillCountWidget")
            PlayerUI.RemoveWidget(KillCountWidget)
            Print("Removing TimerWidget")
            PlayerUI.RemoveWidget(TimerWidget)
            Print("Removing WaveCountWidget")
            PlayerUI.RemoveWidget(WaveCountWidget)
           
            # If you have additional widgets, ensure to remove them too
            # PlayerUI.RemoveWidget(ProgressBarWidget)
    
    
            
    
